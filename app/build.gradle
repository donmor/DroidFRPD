plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.gradle.download)
}

boolean buildBinaries = true
boolean enableClient = true
boolean enableServer = true
boolean enableArm64 = true
boolean enableAmd64 = true

var sdkDirectory = System.getenv("ANDROID_HOME")
if (sdkDirectory == null) sdkDirectory = System.getenv("ANDROID_SDK_ROOT")

def ccAmd64
def ccArm64
def ndkAlt
try {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    if (sdkDirectory == null) sdkDirectory = properties.getProperty('sdk.dir')
    ndkAlt = properties.getProperty('ndk.version')
    // Boolean properties are inverted to keep boolean variables true by default
    buildBinaries = !Boolean.valueOf("${properties.getProperty('frp.usePrebuiltExecutables')}")
    enableClient = !Boolean.valueOf("${properties.getProperty('frp.disableClient')}")
    enableServer = !Boolean.valueOf("${properties.getProperty('frp.disableServer')}")
    enableArm64 = !Boolean.valueOf("${properties.getProperty('frp.disableArm64')}")
    enableAmd64 = !Boolean.valueOf("${properties.getProperty('frp.disableAmd64')}")
} catch (ignored) {
}

assert enableClient || enableServer
assert enableArm64 || enableAmd64

android {
    namespace = 'top.donmor.droidfrpd'
    compileSdk = 36
    if (ndkAlt != null) ndkVersion = ndkAlt

    defaultConfig {
        applicationId "top.donmor.droidfrpd"
        minSdk = 26
        targetSdk = 36
        versionCode 105
        versionName "${gradle.version}+${((String) gradle.frpVersion).replaceAll('\\D', '')}"

        buildConfigField('String', 'BINARY_FRP_S', "\"libfrps_${((String) gradle.frpVersion).replace('.', '_')}.so\"")
        buildConfigField('String', 'BINARY_FRP_C', "\"libfrpc_${((String) gradle.frpVersion).replace('.', '_')}.so\"")
        buildConfigField('boolean', 'ENABLE_CLIENT', "${enableClient}")
        buildConfigField('boolean', 'ENABLE_SERVER', "${enableServer}")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    buildFeatures {
        viewBinding = true
        buildConfig = true
    }
    sourceSets {
        main {
            //noinspection GrDeprecatedAPIUsage
            jni {
                srcDirs 'src/main/jni', 'src/main/jniLibs'
            }
        }
    }
    androidResources {
        noCompress = ['.lic']
    }
    packaging {
        jniLibs {
            useLegacyPackaging = true
        }
    }
}

dependencies {

    implementation libs.appcompat
    implementation libs.material
    implementation libs.constraintlayout
    implementation libs.lifecycle.livedata.ktx
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.navigation.fragment
    implementation libs.navigation.ui
    implementation libs.preference
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
}

// All automations

import de.undercouch.gradle.tasks.download.Download

tasks.register('cleanRedudantCores', Delete) {
    GString version = "${gradle.frpVersion}"
    String version_ = version.replace('.', '_')
    delete fileTree("src/main/jniLibs/").matching {
        if (enableClient && enableArm64) {
            exclude "arm64-v8a/libfrpc_${version_}.so"
        }
        if (enableServer && enableArm64) {
            exclude "arm64-v8a/libfrps_${version_}.so"
        }
        if (enableClient && enableAmd64) {
            exclude "x86_64/libfrpc_${version_}.so"
        }
        if (enableServer && enableAmd64) {
            exclude "x86_64/libfrps_${version_}.so"
        }
    }
}

tasks.register('updateCorePackages', Download) {
    src "http://github.com/fatedier/frp/releases/download/v${gradle.frpVersion}/frp_${gradle.frpVersion}_android_arm64.tar.gz"
    src "http://github.com/fatedier/frp/releases/download/v${gradle.frpVersion}/frp_${gradle.frpVersion}_linux_amd64.tar.gz"
    dest 'build/tmp/'
    onlyIfNewer true
}

tasks.register('copyCores') {
    dependsOn 'updateCorePackages'
    dependsOn 'cleanRedudantCores'
    doLast {
        GString version = "${gradle.frpVersion}"
        String version_ = version.replace('.', '_')
        def arch = [:]
        if (enableArm64) {
            arch.putLast('arm64-v8a', "frp_${version}_android_arm64")
        }
        if (enableAmd64) {
            arch.putLast('x86_64', "frp_${version}_linux_amd64")
        }
        arch.each {
            GString jniDir = "src/main/jniLibs/${it.key}/"
            GString pkgPath = "build/tmp/${it.value}.tar.gz"
            GString pkgDir = it.value
            FileTree files = tarTree(pkgPath).matching {
                if (enableClient) {
                    include "${pkgDir}/frpc"
                }
                if (enableServer) {
                    include "${pkgDir}/frps"
                }
            }
            def urls = []
            files.each { f ->
                urls << f.toURI().toURL()
            }
            download {}.run {
                src urls
                onlyIfModified true
                if (urls.size() > 1) {
                    dest jniDir
                    eachFile { details ->
                        details.name = "lib${details.name}_${version_}.so"
                    }
                } else {
                    dest "${jniDir}/lib${files.files.iterator().next().name}_${version_}.so"
                }
            }
        }
    }
}

tasks.configureEach {t ->
    if (t.name ==~ /build(Amd64|Arm64)Frp(Client|Server)Core/) {
        if (ccArm64 == null || ccAmd64 == null) {
            File llvmPath = file("${sdkDirectory}/ndk/${android.ndkVersion}/toolchains/llvm/prebuilt")
            llvmPath.eachDir { arch ->
                File binPath = file("${arch.path}/bin")
                binPath.eachFileMatch(groovy.io.FileType.FILES, ~/(clang|clang\.exe)/) { ck ->
                    def check = ("${ck.path} --version").execute()
                    if (check.waitFor() == 0) {
                        // Binaries in this arch directory are runnable
                        binPath.eachFileMatch(groovy.io.FileType.FILES, ~/aarch64-linux-android35-(clang|clang\.exe)/) { cc ->
                            if (ccArm64 == null) ccArm64 = cc.path
                        }
                        binPath.eachFileMatch(groovy.io.FileType.FILES, ~/x86_64-linux-android35-(clang|clang\.exe)/) { cc ->
                            if (ccAmd64 == null) ccAmd64 = cc.path
                        }
                    }
                }
            }
            if (ccArm64 != null && ccAmd64 != null) {
                println("CCAmd64=${ccAmd64}")
                println("CCArm64=${ccArm64}")
            }
        }
    }
}

tasks.register('buildAmd64FrpClientCore', Exec) {
    GString version = "${gradle.frpVersion}"
    String version_ = version.replace('.', '_')
    String obj = 'frpc'
    String arch = 'amd64'
    String os = 'linux'
    String jniDir = 'x86_64'
    int cgo = 0
    workingDir "../frp"
    executable 'env'
    args 'go', 'build', '-trimpath', '-ldflags', '-s -w -buildid=', '-tags', obj,
            '-o', "../app/src/main/jniLibs/${jniDir}/lib${obj}_${version_}.so", "./cmd/${obj}"
    try {
        if (file(ccAmd64).isFile()) {
            environment 'CC', ccAmd64
            os = 'android'
            cgo = 1
        }
    } catch (ignored) {
    }
    environment 'CGO_ENABLED', cgo
    environment 'GOOS', os
    environment 'GOARCH', arch
}

tasks.register('buildAmd64FrpServerCore', Exec) {
    GString version = "${gradle.frpVersion}"
    String version_ = version.replace('.', '_')
    String obj = 'frps'
    String arch = 'amd64'
    String os = 'linux'
    String jniDir = 'x86_64'
    int cgo = 0
    workingDir "../frp"
    executable 'env'
    args 'go', 'build', '-trimpath', '-ldflags', '-s -w -buildid=', '-tags', obj,
            '-o', "../app/src/main/jniLibs/${jniDir}/lib${obj}_${version_}.so", "./cmd/${obj}"
    try {
        if (file(ccAmd64).isFile()) {
            environment 'CC', ccAmd64
            os = 'android'
            cgo = 1
        }
    } catch (ignored) {
    }
    environment 'CGO_ENABLED', cgo
    environment 'GOOS', os
    environment 'GOARCH', arch
}

tasks.register('buildArm64FrpClientCore', Exec) {
    GString version = "${gradle.frpVersion}"
    String version_ = version.replace('.', '_')
    String obj = 'frpc'
    String arch = 'arm64'
    String os = 'android'
    String jniDir = 'arm64-v8a'
    int cgo = 0
    workingDir "../frp"
    executable 'env'
    args 'go', 'build', '-trimpath', '-ldflags', '-s -w -buildid=', '-tags', obj,
            '-o', "../app/src/main/jniLibs/${jniDir}/lib${obj}_${version_}.so", "./cmd/${obj}"
    try {
        if (file(ccArm64).isFile()) {
            environment 'CC', ccArm64
            cgo = 1
        }
    } catch (ignored) {
    }
    environment 'CGO_ENABLED', cgo
    environment 'GOOS', os
    environment 'GOARCH', arch
}

tasks.register('buildArm64FrpServerCore', Exec) {
    GString version = "${gradle.frpVersion}"
    String version_ = version.replace('.', '_')
    String obj = 'frps'
    String arch = 'arm64'
    String os = 'android'
    String jniDir = 'arm64-v8a'
    int cgo = 0
    workingDir "../frp"
    executable 'env'
    args 'go', 'build', '-trimpath', '-ldflags', '-s -w -buildid=', '-tags', obj,
            '-o', "../app/src/main/jniLibs/${jniDir}/lib${obj}_${version_}.so", "./cmd/${obj}"
    try {
        if (file(ccArm64).isFile()) {
            environment 'CC', ccArm64
            cgo = 1
        }
    } catch (ignored) {
    }
    environment 'CGO_ENABLED', cgo
    environment 'GOOS', os
    environment 'GOARCH', arch
}

tasks.register('checkCores') {
    boolean needsUpdate = false
    GString version = "${gradle.frpVersion}"
    if (file("src/main/jniLibs/arm64-v8a/libfrpc_${version.replace('.', '_')}.so").isFile() ^ (enableClient && enableArm64)) {
        needsUpdate = true
    }
    if (file("src/main/jniLibs/arm64-v8a/libfrps_${version.replace('.', '_')}.so").isFile() ^ (enableServer && enableArm64)) {
        needsUpdate = true
    }
    if (file("src/main/jniLibs/x86_64/libfrpc_${version.replace('.', '_')}.so").isFile() ^ (enableClient && enableAmd64)) {
        needsUpdate = true
    }
    if (file("src/main/jniLibs/x86_64/libfrps_${version.replace('.', '_')}.so").isFile() ^ (enableServer && enableAmd64)) {
        needsUpdate = true
    }
    if (needsUpdate) {
        if (buildBinaries) {
            if (enableClient && enableArm64) {
                finalizedBy 'buildArm64FrpClientCore'
            }
            if (enableServer && enableArm64) {
                finalizedBy 'buildArm64FrpServerCore'
            }
            if (enableClient && enableAmd64) {
                finalizedBy 'buildAmd64FrpClientCore'
            }
            if (enableServer && enableAmd64) {
                finalizedBy 'buildAmd64FrpServerCore'
            }
            finalizedBy 'cleanRedudantCores'
        } else {
            finalizedBy 'copyCores'
        }
    }
}

tasks.register('copyLicense', Download) {
    src file('../LICENSE').toURI().toURL()
    dest 'src/main/assets/'
    onlyIfModified true
}

tasks.register('ndkVersion') {
    doLast{
        println(android.ndkVersion)
    }
}

clean {
    delete "src/main/jniLibs"
    doLast {
        def process = Runtime.getRuntime().exec("go clean -x", null, file("../frp"))
        process.inputStream.eachLine {
            println it
        }
        process.errorStream.eachLine {
            println it
        }
        process.waitFor()
    }
}

gradle.projectsEvaluated {
    preBuild.dependsOn('copyLicense')
    preBuild.dependsOn('checkCores')
}